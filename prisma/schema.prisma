// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String    @id @default(cuid())
  name             String?
  email            String    @unique
  emailVerified    DateTime?
  image            String?
  password         String
  credits          Int       @default(10)
  stripeCustomerId String?   @unique

  // Auth relations
  accounts           Account[]
  sessions           Session[]
  verificationTokens VerificationToken[]

  // Project-specific relations
  posts         Post[] // Shared
  uploadedFiles UploadedFile[] // Project 1
  clips         Clip[] // Project 1
  ownedRooms    Room[]         @relation("RoomOwner") // Project 3
  roomInvites   RoomInvite[] // Project 3
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? // @db.Text
  access_token             String? // @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? // @db.Text
  session_state            String?
  refresh_token_expires_in Int?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  User       User?    @relation(fields: [userId], references: [id])
  userId     String?

  @@unique([identifier, token])
}

model Post {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdBy   User   @relation(fields: [createdById], references: [id])
  createdById String

  @@index([name])
}

model UploadedFile {
  id          String   @id @default(cuid())
  s3Key       String
  displayName String?
  uploaded    Boolean  @default(false)
  status      String   @default("queued") // processing, processed, no credits
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  clips Clip[]

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@index([s3Key])
}

model Clip {
  id        String   @id @default(cuid())
  s3Key     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  uploadedFile   UploadedFile? @relation(fields: [uploadedFileId], references: [id], onDelete: Cascade)
  uploadedFileId String?

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@index([s3Key])
}

model Room {
  id        String   @id @default(cuid())
  title     String   @default("Untitled")
  createdAt DateTime @default(now())

  owner   User   @relation("RoomOwner", fields: [ownerId], references: [id])
  ownerId String

  roomInvites RoomInvite[]
}

model RoomInvite {
  id String @id @default(cuid())

  room   Room   @relation(fields: [roomId], references: [id])
  roomId String

  user   User   @relation(fields: [userId], references: [id])
  userId String
}
